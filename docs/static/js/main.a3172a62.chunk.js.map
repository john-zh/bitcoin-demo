{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["token","url","TESTNET","bitcoin","networks","testnet","TextArea","Input","App","props","_this","Object","_Users_johnzh_gitProjects_chainboard_bitcoin_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_johnzh_gitProjects_chainboard_bitcoin_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_johnzh_gitProjects_chainboard_bitcoin_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","createTestAddress","keyPair","ECPair","makeRandom","network","testAddress","payments","p2pkh","pubkey","publicKey","setState","generateMnemonic","mnemonic","bip39","localStorage","setItem","seed","mnemonicToSeed","node","bip32","fromSeed","privateKey","toWIF","neutered","toBase58","getAddress","derivePath","importFromMnemonic","state","myNode","getBalance","loading","_Users_johnzh_gitProjects_chainboard_bitcoin_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","balance","fetch","concat","then","r","json","res","console","log","utxos","txrefs","sort","a","b","value","catch","err","getRealAmount","amount","parseInt","Math","pow","buildTrans","_Users_johnzh_gitProjects_chainboard_bitcoin_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","transAddress","transAmount","message","error","me","fromWIF","txb","TransactionBuilder","setVersion","count","inIndex","every","item","index","i","addInput","tx_hash","tx_output_n","addOutput","fees","sign","build","getId","buildHex","toHex","broadcastTrans","broadcast","method","headers","Accept","Content-Type","body","JSON","stringify","tx","broadcastRes","test","_this2","window","getItem","address","_this3","flexCenter","display","alignItems","labelStyle","minWidth","maxWidth","width","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","style","padding","textAlign","antd__WEBPACK_IMPORTED_MODULE_12__","checked","disabled","onChange","v","marginLeft","color","marginTop","antd__WEBPACK_IMPORTED_MODULE_13__","onClick","target","antd__WEBPACK_IMPORTED_MODULE_10__","readOnly","open","fontSize","react_json_view__WEBPACK_IMPORTED_MODULE_18___default","maxHeight","overflow","src","antd__WEBPACK_IMPORTED_MODULE_14__","step","Component","hot","module","Boolean","location","hostname","match","ReactDOM","render","_react_16_7_0_react_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3172a62.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport bitcoin from 'bitcoinjs-lib';\nimport './App.css';\nimport { Button, Input, Switch, message, InputNumber } from 'antd';\nimport bip32 from 'bip32';\nimport bip39 from 'bip39';\nimport { hot } from 'react-hot-loader';\nimport ReactJson from 'react-json-view';\n\nconst token = '4a7af9bcf8ad441e84d71f0c478c5bb1';\n\nconst url = 'https://api.blockcypher.com/v1/btc/test3'\n\nconst TESTNET = bitcoin.networks.testnet;\n// const TESTNET = null;\nconst { TextArea } = Input;\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            test: true,\n            testAddress: '',\n            transAddress: '',\n            transAmount: 0,\n            fees: 0.00016930,\n            privateKey: '',\n            publicKey: '',\n            balance: '',\n            buildHex: '',\n            broadcastRes: {},\n            loading: {\n                balance: false,\n                broadcast: false\n            },\n            mnemonic: '',\n        }\n    }\n\n    componentDidMount() {\n        window.bitcoin = bitcoin\n        const mnemonic = localStorage.getItem('mnemonic')\n        if (mnemonic) this.setState({ mnemonic }, () => {\n            this.importFromMnemonic()\n        })\n    }\n\n    // 生成测试地址\n    createTestAddress = () => {\n        const keyPair = bitcoin.ECPair.makeRandom({ network: TESTNET })\n        const { testAddress } = bitcoin.payments.p2pkh({ pubkey: keyPair.publicKey, network: TESTNET })\n        this.setState({ testAddress: testAddress })\n    }\n\n    // 生成助记词\n    generateMnemonic = () => {\n        const mnemonic = bip39.generateMnemonic()\n        localStorage.setItem('mnemonic', mnemonic)\n        const seed = bip39.mnemonicToSeed(mnemonic)\n        const node = bip32.fromSeed(seed, TESTNET)\n        const privateKey = node.toWIF()\n        const publicKey = node.neutered().toBase58()\n        const testAddress = this.getAddress(node.derivePath(\"m/44'/0'/0'/0/0\"), TESTNET)\n        this.setState({ mnemonic, testAddress, privateKey, publicKey })\n    }\n\n    // 导入助记词\n    importFromMnemonic = () => {\n        localStorage.setItem('mnemonic', this.state.mnemonic)\n        const seed = bip39.mnemonicToSeed(this.state.mnemonic)\n        const node = bip32.fromSeed(seed, TESTNET)\n        const privateKey = node.toWIF()\n        const publicKey = node.neutered().toBase58()\n        // const testPublicKey = node.derivePath(\"m/44'/0'/0'/0/0\").publicKey\n        // const keyPair = bitcoin.ECPair.fromPublicKey(testPublicKey)\n        // const { address: testAddress } = bitcoin.payments.p2sh({\n        //     redeem: bitcoin.payments.p2wpkh({ pubkey: keyPair.publicKey })\n        // })\n        this.myNode = node.derivePath(\"m/44'/0'/0'/0/0\")\n        const testAddress = this.getAddress(this.myNode, TESTNET)\n        this.setState({ testAddress, privateKey, publicKey })\n    }\n\n    // 获取余额\n    getBalance = () => {\n        this.setState({ loading: { ...this.state.loading, balance: true } })\n        fetch(`${url}/addrs/${this.state.testAddress}?token=${token}&unspentOnly=true`)\n            .then(r => r.json())\n            .then(res => {\n                console.log(res)\n                this.setState({ loading: { ...this.state.loading, balance: false } })\n                let balance = res.balance || 0\n                let utxos = res.txrefs\n                this.utxos && (this.utxos = utxos.sort((a, b) => a.value - b.value))\n                this.setState({ balance, utxos })\n            })\n            .catch(err => {\n                this.setState({ loading: { ...this.state.loading, balance: false } })\n                console.log(err)\n            })\n    }\n\n    getRealAmount = (amount) => {\n        return parseInt(amount * (10 ** 8))\n    }\n\n    // 构建转账\n    buildTrans = () => {\n        let { state } = this\n        if (!state.balance) {\n            message.error('余额不足'); return;\n        } else if (!state.transAddress) {\n            message.error('请填写转账地址'); return;\n        } else if (!state.transAmount) {\n            message.error('请填写转账金额'); return;\n        } else if (state.transAmount >= this.getRealAmount(state.balance)) {\n            message.error('余额不足'); return;\n        }\n\n        const me = bitcoin.ECPair.fromWIF(this.myNode.toWIF(), TESTNET)\n        const txb = new bitcoin.TransactionBuilder(TESTNET)\n\n        txb.setVersion(1)\n\n        let count = 0\n        let inIndex = 0\n        this.utxos.every((item, index) => {\n            count += item.value\n            if (count > state.transAmount) {\n                inIndex = index\n                return false\n            }\n            return true\n        })\n\n        for (let i = 0; i <= inIndex; i++) {\n            txb.addInput(this.utxos[i].tx_hash, this.utxos[i].tx_output_n)\n        }\n        // 转给对方\n        txb.addOutput(this.state.transAddress, this.getRealAmount(this.state.transAmount))\n        // 转给自己 扣除手续费\n        txb.addOutput(this.state.testAddress, count - this.getRealAmount(this.state.transAmount) - this.getRealAmount(state.fees))\n        for (let i = 0; i <= inIndex; i++) {\n            txb.sign(i, me)\n        }\n\n        console.log(txb.build().getId())\n\n        this.setState({\n            buildHex: txb.build().toHex()\n        })\n    }\n\n    // 广播交易\n    broadcastTrans = () => {\n        this.setState({ loading: { ...this.state.loading, broadcast: true } })\n        fetch('${url}/txs/push', {\n            method: 'POST',\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                tx: this.state.buildHex\n            })\n        })\n            .then(r => r.json())\n            .then(res => {\n                if (res.error) {\n                    message.error(res.error)\n                }\n                this.setState({ loading: { ...this.state.loading, broadcast: false } })\n                this.setState({ broadcastRes: res })\n                console.log(res)\n            })\n            .catch(err => {\n                message.error(err.message)\n                this.setState({ loading: { ...this.state.loading, broadcast: false } })\n                console.log(err)\n            })\n    }\n\n\n    getAddress(node, network) {\n        return bitcoin.payments.p2pkh({ pubkey: node.publicKey, network }).address\n    }\n\n    render() {\n        const flexCenter = {\n            display: 'flex',\n            alignItems: 'center'\n        }\n        const labelStyle = {\n            minWidth: '139px',\n            maxWidth: '139px',\n            width: '200px'\n        }\n        return (\n            <div className=\"App\" style={{ padding: '10px', textAlign: 'left' }}>\n                <section style={{ display: 'flex' }}>\n                    <div style={labelStyle}>\n                        使用测试网络\n                    </div>\n                    <Switch\n                        checked={this.state.test}\n                        disabled\n                        onChange={v => this.setState({ test: v })}\n                    />\n                    <span style={{ marginLeft: '10px', color: 'red' }}>请按顺序操作->生成或导入->获取余额->构建转账->广播</span>\n                </section>\n                <section style={{ display: 'flex', marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        <Button onClick={this.generateMnemonic}>生成助记词</Button>\n                        <Button style={{ marginTop: '5px' }} onClick={this.importFromMnemonic}>导入助记词</Button>\n                    </div>\n                    <TextArea\n                        value={this.state.mnemonic}\n                        onChange={v => this.setState({ mnemonic: v.target.value })}\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        我的钱包私钥\n                    </div>\n                    <Input\n                        value={this.state.privateKey}\n                        readOnly\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        我的钱包公钥\n                    </div>\n                    <Input\n                        value={this.state.publicKey}\n                        readOnly\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        我的 BTC 账户\n                    </div>\n                    <Input\n                        value={this.state.testAddress}\n                        readOnly\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        <Button\n                            onClick={this.getBalance}\n                            loading={this.state.loading.balance}\n                        >查询余额</Button>\n                    </div>\n                    <Input\n                        value={this.state.balance ? this.state.balance / (10 ** 8) : ''}\n                        readOnly\n                    />\n                    <Button\n                        onClick={() => { window.open('https://coinfaucet.eu/en/btc-testnet/') }}\n                        style={{ marginLeft: '10px' }}\n                    >获取测试金</Button>\n                </section>\n                <section style={{ ...flexCenter, fontSize: '12px', color: 'grey' }}>\n                    <div style={labelStyle}>\n                    </div>\n                    接口使用第三方 api, 可能出现延迟或超时\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        UTXOs\n                    </div>\n                    <ReactJson\n                        style={{ maxHeight: '300px', overflow: 'auto' }}\n                        src={this.state.utxos}\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        转账地址\n                    </div>\n                    <Input\n                        value={this.state.transAddress}\n                        onChange={v => this.setState({ transAddress: v.target.value })}\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        转账金额\n                    </div>\n                    <InputNumber\n                        step={0.001}\n                        style={{ width: '100%' }}\n                        value={this.state.transAmount}\n                        onChange={v => this.setState({ transAmount: v })}\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        转账手续费\n                    </div>\n                    <InputNumber\n                        step={0.001}\n                        style={{ width: '100%' }}\n                        value={this.state.fees}\n                        onChange={v => this.setState({ fees: v })}\n                    />\n                </section>\n                <section style={{ ...flexCenter, marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                        <Button\n                            onClick={this.buildTrans}\n                        // loading={this.state.loading.balance}\n                        >构建转账</Button>\n                    </div>\n                    <Input\n                        value={this.state.buildHex}\n                        readOnly\n                    />\n                </section>\n                <section style={{ ...flexCenter, fontSize: '12px', color: 'grey', marginTop: '10px' }}>\n                    <div style={labelStyle}>\n                    </div>\n                    接口使用第三方 api, 可能出现延迟或超时\n                </section>\n                <section style={{ ...flexCenter }}>\n                    <div style={labelStyle}>\n                        <Button\n                            onClick={this.broadcastTrans}\n                            loading={this.state.loading.broadcast}\n                        >广播转账</Button>\n                    </div>\n                    <ReactJson\n                        style={{ maxHeight: '300px', overflow: 'auto' }}\n                        src={this.state.broadcastRes}\n                    />\n                </section>\n            </div >\n        );\n    }\n}\n\nexport default hot(module)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}